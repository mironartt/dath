# Generated by Django 2.2.5 on 2019-12-08 23:05

import core.models.abstract_user
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название карты')),
                ('offer_profit', models.IntegerField(verbose_name='Доход от предложения')),
                ('binnary_profit', models.IntegerField(verbose_name='Бинарный доход')),
                ('is_active', models.BooleanField(default=True, verbose_name='Доступна ли карта')),
            ],
            options={
                'verbose_name': 'Модель для карт',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('login', models.CharField(max_length=32, null=True, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cart_number', models.CharField(max_length=20, verbose_name='Номер карты')),
                ('date_birth', models.DateField(null=True, verbose_name='Дата рождения')),
                ('place_birth', models.TextField(null=True, verbose_name='Место рождения')),
                ('passport_series', models.CharField(max_length=20, null=True, verbose_name='Серия паспорта')),
                ('registration_office', models.TextField(null=True, verbose_name='Офис регистрации')),
                ('ref_id', models.CharField(max_length=20, null=True, unique=True, verbose_name='Код бинара для приглашения новых юзеров')),
                ('image', models.ImageField(null=True, upload_to='images/profiles/', validators=[core.models.abstract_user.validate_img], verbose_name='Изображение профиля')),
                ('cart_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Cards', verbose_name='Тип карты')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('refer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Пригласивший юзер')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Модель пользователя',
            },
            managers=[
                ('objects', core.models.abstract_user.UserManager()),
            ],
        ),
    ]
